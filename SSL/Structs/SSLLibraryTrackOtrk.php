<?php

/* Autogenerated by XoupCompiler */

class XOUPSSLLibraryTrackOtrkUnpacker extends Unpacker
{

    private $out_buffer = '';
    private $context = array();
    private $data = array(
        "EOS" => "",
        "COLON" => ": ",
        "EUNKNOWN" => "Unknown chunk ",
    );

    public function unpack($bin)
    {
        $binlen = strlen($bin);
        $acc = 0;
        $ptr = 0;
        $this->_main($bin, $binlen, $acc, $ptr);
        return $this->context;
    }

    public function flushBuffer()
    {
        L::level(L::INFO) &&
            L::log(L::INFO, __CLASS__, $this->out_buffer,
                array());
    }

    private function _main($bin, $binlen, &$acc, &$ptr)
    {
        /* chunk. */
        if(!$this->_chunk($bin, $binlen, $acc, $ptr)) return false;
        return true;
    }

    private function _ascii($bin, $binlen, &$acc, &$ptr)
    {
        /* r1l>i_ */
        if($ptr >= $binlen) return false;
        $datum = substr($bin, $ptr, 4);
        $ptr += 4;
        $acc = (int) $this->unpacksint($datum);
        /* r_b>r_ */
        if($ptr >= $binlen) return false;
        $datum = substr($bin, $ptr, $acc);
        $ptr += $acc;
        $acc = $datum;
        return true;
    }

    private function _string($bin, $binlen, &$acc, &$ptr)
    {
        /* r1l>i_ */
        if($ptr >= $binlen) return false;
        $datum = substr($bin, $ptr, 4);
        $ptr += 4;
        $acc = (int) $this->unpacksint($datum);
        /* r_b>s_ */
        if($ptr >= $binlen) return false;
        $datum = substr($bin, $ptr, $acc);
        $ptr += $acc;
        $acc = (string) $this->unpackstr($datum);
        return true;
    }

    private function _int($bin, $binlen, &$acc, &$ptr)
    {
        /* r1l>i_ */
        if($ptr >= $binlen) return false;
        $datum = substr($bin, $ptr, 4);
        $ptr += 4;
        $acc = (int) $this->unpacksint($datum);
        /* r_b>i_ */
        if($ptr >= $binlen) return false;
        $datum = substr($bin, $ptr, $acc);
        $ptr += $acc;
        $acc = (int) $this->unpacksint($datum);
        return true;
    }

    private function _hex($bin, $binlen, &$acc, &$ptr)
    {
        /* r1l>i_ */
        if($ptr >= $binlen) return false;
        $datum = substr($bin, $ptr, 4);
        $ptr += 4;
        $acc = (int) $this->unpacksint($datum);
        /* r_b>h_ */
        if($ptr >= $binlen) return false;
        $datum = substr($bin, $ptr, $acc);
        $ptr += $acc;
        $hd = new Hexdumper();
        $acc = trim($hd->hexdump($datum));
        return true;
    }

    private function _float($bin, $binlen, &$acc, &$ptr)
    {
        /* r1l>i_ */
        if($ptr >= $binlen) return false;
        $datum = substr($bin, $ptr, 4);
        $ptr += 4;
        $acc = (int) $this->unpacksint($datum);
        /* r_b>f_ */
        if($ptr >= $binlen) return false;
        $datum = substr($bin, $ptr, $acc);
        $ptr += $acc;
        $acc = (float) $this->unpackfloat($datum);
        return true;
    }

    private function _timestamp($bin, $binlen, &$acc, &$ptr)
    {
        /* r1l>i_ */
        if($ptr >= $binlen) return false;
        $datum = substr($bin, $ptr, 4);
        $ptr += 4;
        $acc = (int) $this->unpacksint($datum);
        /* r_b>t_ */
        if($ptr >= $binlen) return false;
        $datum = substr($bin, $ptr, $acc);
        $ptr += $acc;
        $acc = date('Y-m-d H:i:s', (int) $this->unpackuint($datum));
        return true;
    }

    private function _chunk($bin, $binlen, &$acc, &$ptr)
    {
        /* r4b>r_ */
        if($ptr >= $binlen) return false;
        $datum = substr($bin, $ptr, 4);
        $ptr += 4;
        $acc = $datum;
        /* chunk_. */
        if(!$this->lookup('chunk' . $acc . '', $bin, $binlen, $acc, $ptr)) return false;
        /* chunk. */
        if(!$this->_chunk($bin, $binlen, $acc, $ptr)) return false;
        return true;
    }

    private function _trap($bin, $binlen, &$acc, &$ptr)
    {
        /* lEUNKNOWN>r! */
        $datum = $this->data['EUNKNOWN'];
        if($datum === '') $this->flushBuffer();
        else $this->out_buffer .= $datum;
        /* c>r! */
        $datum = $acc;
        if($datum === '') $this->flushBuffer();
        else $this->out_buffer .= $datum;
        /* lCOLON>r! */
        $datum = $this->data['COLON'];
        if($datum === '') $this->flushBuffer();
        else $this->out_buffer .= $datum;
        /* hex. */
        if(!$this->_hex($bin, $binlen, $acc, $ptr)) return false;
        /* c>r! */
        $datum = $acc;
        if($datum === '') $this->flushBuffer();
        else $this->out_buffer .= $datum;
        /* lEOS>r! */
        $datum = $this->data['EOS'];
        if($datum === '') $this->flushBuffer();
        else $this->out_buffer .= $datum;
        return true;
    }

    private function _chunkttyp($bin, $binlen, &$acc, &$ptr)
    {
        /* string. */
        if(!$this->_string($bin, $binlen, $acc, $ptr)) return false;
        /* c>rtype */
        $datum = $acc;
        $this->context['type'] = $datum;
        return true;
    }

    private function _chunkpfil($bin, $binlen, &$acc, &$ptr)
    {
        /* string. */
        if(!$this->_string($bin, $binlen, $acc, $ptr)) return false;
        /* c>rfile */
        $datum = $acc;
        $this->context['file'] = $datum;
        return true;
    }

    private function _chunktsng($bin, $binlen, &$acc, &$ptr)
    {
        /* string. */
        if(!$this->_string($bin, $binlen, $acc, $ptr)) return false;
        /* c>rtitle */
        $datum = $acc;
        $this->context['title'] = $datum;
        return true;
    }

    private function _chunktart($bin, $binlen, &$acc, &$ptr)
    {
        /* string. */
        if(!$this->_string($bin, $binlen, $acc, $ptr)) return false;
        /* c>rartist */
        $datum = $acc;
        $this->context['artist'] = $datum;
        return true;
    }

    private function _chunktalb($bin, $binlen, &$acc, &$ptr)
    {
        /* string. */
        if(!$this->_string($bin, $binlen, $acc, $ptr)) return false;
        /* c>ralbum */
        $datum = $acc;
        $this->context['album'] = $datum;
        return true;
    }

    private function _chunktgen($bin, $binlen, &$acc, &$ptr)
    {
        /* string. */
        if(!$this->_string($bin, $binlen, $acc, $ptr)) return false;
        /* c>rgenre */
        $datum = $acc;
        $this->context['genre'] = $datum;
        return true;
    }

    private function _chunktlen($bin, $binlen, &$acc, &$ptr)
    {
        /* string. */
        if(!$this->_string($bin, $binlen, $acc, $ptr)) return false;
        /* c>rlength */
        $datum = $acc;
        $this->context['length'] = $datum;
        return true;
    }

    private function _chunktsiz($bin, $binlen, &$acc, &$ptr)
    {
        /* string. */
        if(!$this->_string($bin, $binlen, $acc, $ptr)) return false;
        /* c>rfilesize */
        $datum = $acc;
        $this->context['filesize'] = $datum;
        return true;
    }

    private function _chunktbit($bin, $binlen, &$acc, &$ptr)
    {
        /* string. */
        if(!$this->_string($bin, $binlen, $acc, $ptr)) return false;
        /* c>rbitrate */
        $datum = $acc;
        $this->context['bitrate'] = $datum;
        return true;
    }

    private function _chunktsmp($bin, $binlen, &$acc, &$ptr)
    {
        /* string. */
        if(!$this->_string($bin, $binlen, $acc, $ptr)) return false;
        /* c>rsamplerate */
        $datum = $acc;
        $this->context['samplerate'] = $datum;
        return true;
    }

    private function _chunktbpm($bin, $binlen, &$acc, &$ptr)
    {
        /* string. */
        if(!$this->_string($bin, $binlen, $acc, $ptr)) return false;
        /* c>rbpm */
        $datum = $acc;
        $this->context['bpm'] = $datum;
        return true;
    }

    private function _chunktlbl($bin, $binlen, &$acc, &$ptr)
    {
        /* string. */
        if(!$this->_string($bin, $binlen, $acc, $ptr)) return false;
        /* c>rlabel */
        $datum = $acc;
        $this->context['label'] = $datum;
        return true;
    }

    private function _chunktadd($bin, $binlen, &$acc, &$ptr)
    {
        /* string. */
        if(!$this->_string($bin, $binlen, $acc, $ptr)) return false;
        /* c>radded */
        $datum = $acc;
        $this->context['added'] = $datum;
        return true;
    }

    private function _chunktiid($bin, $binlen, &$acc, &$ptr)
    {
        /* string. */
        if(!$this->_string($bin, $binlen, $acc, $ptr)) return false;
        /* c>ruid */
        $datum = $acc;
        $this->context['uid'] = $datum;
        return true;
    }

    private function _chunktcom($bin, $binlen, &$acc, &$ptr)
    {
        /* string. */
        if(!$this->_string($bin, $binlen, $acc, $ptr)) return false;
        /* c>rcomment */
        $datum = $acc;
        $this->context['comment'] = $datum;
        return true;
    }

    private function _chunktcor($bin, $binlen, &$acc, &$ptr)
    {
        /* string. */
        if(!$this->_string($bin, $binlen, $acc, $ptr)) return false;
        /* c>rcorrupt */
        $datum = $acc;
        $this->context['corrupt'] = $datum;
        return true;
    }

    private function _chunkttyr($bin, $binlen, &$acc, &$ptr)
    {
        /* string. */
        if(!$this->_string($bin, $binlen, $acc, $ptr)) return false;
        /* c>ryear */
        $datum = $acc;
        $this->context['year'] = $datum;
        return true;
    }

    private function _chunktkey($bin, $binlen, &$acc, &$ptr)
    {
        /* string. */
        if(!$this->_string($bin, $binlen, $acc, $ptr)) return false;
        /* c>rkey */
        $datum = $acc;
        $this->context['key'] = $datum;
        return true;
    }

    private function _chunktcmp($bin, $binlen, &$acc, &$ptr)
    {
        /* string. */
        if(!$this->_string($bin, $binlen, $acc, $ptr)) return false;
        /* c>rcomposer */
        $datum = $acc;
        $this->context['composer'] = $datum;
        return true;
    }

    private function _chunkuadd($bin, $binlen, &$acc, &$ptr)
    {
        /* timestamp. */
        if(!$this->_timestamp($bin, $binlen, $acc, $ptr)) return false;
        /* c>radded_ts */
        $datum = $acc;
        $this->context['added'] = $datum;
        return true;
    }

    private function _chunkutme($bin, $binlen, &$acc, &$ptr)
    {
        /* timestamp. */
        if(!$this->_timestamp($bin, $binlen, $acc, $ptr)) return false;
        /* c>rutme */
        $datum = $acc;
        $this->context['utme'] = $datum;
        return true;
    }

    private function _chunkutkn($bin, $binlen, &$acc, &$ptr)
    {
        /* int. */
        if(!$this->_int($bin, $binlen, $acc, $ptr)) return false;
        /* c>rutkn */
        $datum = $acc;
        $this->context['utkn'] = $datum;
        return true;
    }

    private function _chunkulbl($bin, $binlen, &$acc, &$ptr)
    {
        /* int. */
        if(!$this->_int($bin, $binlen, $acc, $ptr)) return false;
        /* c>rulbl */
        $datum = $acc;
        $this->context['ulbl'] = $datum;
        return true;
    }

    private function _chunkufsb($bin, $binlen, &$acc, &$ptr)
    {
        /* int. */
        if(!$this->_int($bin, $binlen, $acc, $ptr)) return false;
        /* c>rufsb */
        $datum = $acc;
        $this->context['ufsb'] = $datum;
        return true;
    }

    private function _chunkudsc($bin, $binlen, &$acc, &$ptr)
    {
        /* int. */
        if(!$this->_int($bin, $binlen, $acc, $ptr)) return false;
        /* c>rudsc */
        $datum = $acc;
        $this->context['udsc'] = $datum;
        return true;
    }

    private function _chunksbav($bin, $binlen, &$acc, &$ptr)
    {
        /* int. */
        if(!$this->_int($bin, $binlen, $acc, $ptr)) return false;
        /* c>rsbav */
        $datum = $acc;
        $this->context['sbav'] = $datum;
        return true;
    }

    private function _chunkbhrt($bin, $binlen, &$acc, &$ptr)
    {
        /* int. */
        if(!$this->_int($bin, $binlen, $acc, $ptr)) return false;
        /* c>rbhrt */
        $datum = $acc;
        $this->context['bhrt'] = $datum;
        return true;
    }

    private function _chunkbmis($bin, $binlen, &$acc, &$ptr)
    {
        /* int. */
        if(!$this->_int($bin, $binlen, $acc, $ptr)) return false;
        /* c>rbmis */
        $datum = $acc;
        $this->context['bmis'] = $datum;
        return true;
    }

    private function _chunkbply($bin, $binlen, &$acc, &$ptr)
    {
        /* int. */
        if(!$this->_int($bin, $binlen, $acc, $ptr)) return false;
        /* c>rbply */
        $datum = $acc;
        $this->context['bply'] = $datum;
        return true;
    }

    private function _chunkblop($bin, $binlen, &$acc, &$ptr)
    {
        /* int. */
        if(!$this->_int($bin, $binlen, $acc, $ptr)) return false;
        /* c>rblop */
        $datum = $acc;
        $this->context['blop'] = $datum;
        return true;
    }

    private function _chunkbitu($bin, $binlen, &$acc, &$ptr)
    {
        /* int. */
        if(!$this->_int($bin, $binlen, $acc, $ptr)) return false;
        /* c>rbitu */
        $datum = $acc;
        $this->context['bitu'] = $datum;
        return true;
    }

    private function _chunkbovc($bin, $binlen, &$acc, &$ptr)
    {
        /* int. */
        if(!$this->_int($bin, $binlen, $acc, $ptr)) return false;
        /* c>rbovc */
        $datum = $acc;
        $this->context['bovc'] = $datum;
        return true;
    }

    private function _chunkbcrt($bin, $binlen, &$acc, &$ptr)
    {
        /* int. */
        if(!$this->_int($bin, $binlen, $acc, $ptr)) return false;
        /* c>rbcrt */
        $datum = $acc;
        $this->context['bcrt'] = $datum;
        return true;
    }

    private function _chunkbiro($bin, $binlen, &$acc, &$ptr)
    {
        /* int. */
        if(!$this->_int($bin, $binlen, $acc, $ptr)) return false;
        /* c>rbiro */
        $datum = $acc;
        $this->context['biro'] = $datum;
        return true;
    }

    private function _chunkbwlb($bin, $binlen, &$acc, &$ptr)
    {
        /* int. */
        if(!$this->_int($bin, $binlen, $acc, $ptr)) return false;
        /* c>rbwlb */
        $datum = $acc;
        $this->context['bwlb'] = $datum;
        return true;
    }

    private function _chunkbwll($bin, $binlen, &$acc, &$ptr)
    {
        /* int. */
        if(!$this->_int($bin, $binlen, $acc, $ptr)) return false;
        /* c>rbwll */
        $datum = $acc;
        $this->context['bwll'] = $datum;
        return true;
    }

    private function _chunkbuns($bin, $binlen, &$acc, &$ptr)
    {
        /* int. */
        if(!$this->_int($bin, $binlen, $acc, $ptr)) return false;
        /* c>rbins */
        $datum = $acc;
        $this->context['bins'] = $datum;
        return true;
    }

    private function lookup($sub, $bin, $binlen, &$acc, &$ptr)
    {
        switch($sub) {
            case 'main': return $this->_main($bin, $binlen, $acc, $ptr);
            case 'ascii': return $this->_ascii($bin, $binlen, $acc, $ptr);
            case 'string': return $this->_string($bin, $binlen, $acc, $ptr);
            case 'int': return $this->_int($bin, $binlen, $acc, $ptr);
            case 'hex': return $this->_hex($bin, $binlen, $acc, $ptr);
            case 'float': return $this->_float($bin, $binlen, $acc, $ptr);
            case 'timestamp': return $this->_timestamp($bin, $binlen, $acc, $ptr);
            case 'chunk': return $this->_chunk($bin, $binlen, $acc, $ptr);
            case 'trap': return $this->_trap($bin, $binlen, $acc, $ptr);
            case 'chunkttyp': return $this->_chunkttyp($bin, $binlen, $acc, $ptr);
            case 'chunkpfil': return $this->_chunkpfil($bin, $binlen, $acc, $ptr);
            case 'chunktsng': return $this->_chunktsng($bin, $binlen, $acc, $ptr);
            case 'chunktart': return $this->_chunktart($bin, $binlen, $acc, $ptr);
            case 'chunktalb': return $this->_chunktalb($bin, $binlen, $acc, $ptr);
            case 'chunktgen': return $this->_chunktgen($bin, $binlen, $acc, $ptr);
            case 'chunktlen': return $this->_chunktlen($bin, $binlen, $acc, $ptr);
            case 'chunktsiz': return $this->_chunktsiz($bin, $binlen, $acc, $ptr);
            case 'chunktbit': return $this->_chunktbit($bin, $binlen, $acc, $ptr);
            case 'chunktsmp': return $this->_chunktsmp($bin, $binlen, $acc, $ptr);
            case 'chunktbpm': return $this->_chunktbpm($bin, $binlen, $acc, $ptr);
            case 'chunktlbl': return $this->_chunktlbl($bin, $binlen, $acc, $ptr);
            case 'chunktadd': return $this->_chunktadd($bin, $binlen, $acc, $ptr);
            case 'chunktiid': return $this->_chunktiid($bin, $binlen, $acc, $ptr);
            case 'chunktcom': return $this->_chunktcom($bin, $binlen, $acc, $ptr);
            case 'chunktcor': return $this->_chunktcor($bin, $binlen, $acc, $ptr);
            case 'chunkttyr': return $this->_chunkttyr($bin, $binlen, $acc, $ptr);
            case 'chunktkey': return $this->_chunktkey($bin, $binlen, $acc, $ptr);
            case 'chunktcmp': return $this->_chunktcmp($bin, $binlen, $acc, $ptr);
            case 'chunkuadd': return $this->_chunkuadd($bin, $binlen, $acc, $ptr);
            case 'chunkutme': return $this->_chunkutme($bin, $binlen, $acc, $ptr);
            case 'chunkutkn': return $this->_chunkutkn($bin, $binlen, $acc, $ptr);
            case 'chunkulbl': return $this->_chunkulbl($bin, $binlen, $acc, $ptr);
            case 'chunkufsb': return $this->_chunkufsb($bin, $binlen, $acc, $ptr);
            case 'chunkudsc': return $this->_chunkudsc($bin, $binlen, $acc, $ptr);
            case 'chunksbav': return $this->_chunksbav($bin, $binlen, $acc, $ptr);
            case 'chunkbhrt': return $this->_chunkbhrt($bin, $binlen, $acc, $ptr);
            case 'chunkbmis': return $this->_chunkbmis($bin, $binlen, $acc, $ptr);
            case 'chunkbply': return $this->_chunkbply($bin, $binlen, $acc, $ptr);
            case 'chunkblop': return $this->_chunkblop($bin, $binlen, $acc, $ptr);
            case 'chunkbitu': return $this->_chunkbitu($bin, $binlen, $acc, $ptr);
            case 'chunkbovc': return $this->_chunkbovc($bin, $binlen, $acc, $ptr);
            case 'chunkbcrt': return $this->_chunkbcrt($bin, $binlen, $acc, $ptr);
            case 'chunkbiro': return $this->_chunkbiro($bin, $binlen, $acc, $ptr);
            case 'chunkbwlb': return $this->_chunkbwlb($bin, $binlen, $acc, $ptr);
            case 'chunkbwll': return $this->_chunkbwll($bin, $binlen, $acc, $ptr);
            case 'chunkbuns': return $this->_chunkbuns($bin, $binlen, $acc, $ptr);
            default:
                return $this->_trap($bin, $binlen, $acc, $ptr);
        }
    }

}
