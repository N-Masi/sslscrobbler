<?php

/* Autogenerated by XoupCompiler */

class XOUPSSLSessionAdatUnpacker extends Unpacker
{

    private $out_buffer = '';
    private $context = array();

    public function unpack($bin)
    {
        $binlen = strlen($bin);
        $acc = 0;
        $ptr = 0;
        $this->_main($bin, $binlen, $acc, $ptr);
        return $this->context;
    }

    public function flushBuffer()
    {
        L::level(L::INFO) &&
            L::log(L::INFO, __CLASS__, $this->out_buffer,
                array());
    }

    private function _main($bin, $binlen, &$acc, &$ptr)
    {
        /* field. */
        if(!$this->_field($bin, $binlen, $acc, $ptr)) return false;
        return true;
    }

    private function _ascii($bin, $binlen, &$acc, &$ptr)
    {
        /* r1l>i_ */
        if($ptr >= $binlen) return false;
        $datum = substr($bin, $ptr, 4);
        $ptr += 4;
        $acc = (int) $this->unpacksint($datum);
        /* r_b>r_ */
        if($ptr >= $binlen) return false;
        $datum = substr($bin, $ptr, $acc);
        $ptr += $acc;
        $acc = $datum;
        return true;
    }

    private function _string($bin, $binlen, &$acc, &$ptr)
    {
        /* r1l>i_ */
        if($ptr >= $binlen) return false;
        $datum = substr($bin, $ptr, 4);
        $ptr += 4;
        $acc = (int) $this->unpacksint($datum);
        /* r_b>s_ */
        if($ptr >= $binlen) return false;
        $datum = substr($bin, $ptr, $acc);
        $ptr += $acc;
        $acc = (string) $this->unpackstr($datum);
        return true;
    }

    private function _int($bin, $binlen, &$acc, &$ptr)
    {
        /* r1l>i_ */
        if($ptr >= $binlen) return false;
        $datum = substr($bin, $ptr, 4);
        $ptr += 4;
        $acc = (int) $this->unpacksint($datum);
        /* r_b>i_ */
        if($ptr >= $binlen) return false;
        $datum = substr($bin, $ptr, $acc);
        $ptr += $acc;
        $acc = (int) $this->unpacksint($datum);
        return true;
    }

    private function _hex($bin, $binlen, &$acc, &$ptr)
    {
        /* r1l>i_ */
        if($ptr >= $binlen) return false;
        $datum = substr($bin, $ptr, 4);
        $ptr += 4;
        $acc = (int) $this->unpacksint($datum);
        /* r_b>h_ */
        if($ptr >= $binlen) return false;
        $datum = substr($bin, $ptr, $acc);
        $ptr += $acc;
        $hd = new Hexdumper();
        $acc = trim($hd->hexdump($datum));
        return true;
    }

    private function _float($bin, $binlen, &$acc, &$ptr)
    {
        /* r1l>i_ */
        if($ptr >= $binlen) return false;
        $datum = substr($bin, $ptr, 4);
        $ptr += 4;
        $acc = (int) $this->unpacksint($datum);
        /* r_b>f_ */
        if($ptr >= $binlen) return false;
        $datum = substr($bin, $ptr, $acc);
        $ptr += $acc;
        $acc = (float) $this->unpackfloat($datum);
        return true;
    }

    private function _timestamp($bin, $binlen, &$acc, &$ptr)
    {
        /* r1l>i_ */
        if($ptr >= $binlen) return false;
        $datum = substr($bin, $ptr, 4);
        $ptr += 4;
        $acc = (int) $this->unpacksint($datum);
        /* r_b>t_ */
        if($ptr >= $binlen) return false;
        $datum = substr($bin, $ptr, $acc);
        $ptr += $acc;
        $acc = date('Y-m-d H:i:s', (int) $this->unpackuint($datum));
        return true;
    }

    private function _field($bin, $binlen, &$acc, &$ptr)
    {
        /* r1l>i_ */
        if($ptr >= $binlen) return false;
        $datum = substr($bin, $ptr, 4);
        $ptr += 4;
        $acc = (int) $this->unpacksint($datum);
        /* field_. */
        if(!$this->lookup('field' . $acc . '', $bin, $binlen, $acc, $ptr)) return false;
        /* field. */
        if(!$this->_field($bin, $binlen, $acc, $ptr)) return false;
        return true;
    }

    private function _field1($bin, $binlen, &$acc, &$ptr)
    {
        /* int. */
        if(!$this->_int($bin, $binlen, $acc, $ptr)) return false;
        /* c>rrow */
        $datum = $acc;
        $this->context['row'] = $datum;
        return true;
    }

    private function _field41($bin, $binlen, &$acc, &$ptr)
    {
        /* string. */
        if(!$this->_string($bin, $binlen, $acc, $ptr)) return false;
        /* c>rdate */
        $datum = $acc;
        $this->context['date'] = $datum;
        return true;
    }

    private function _field42($bin, $binlen, &$acc, &$ptr)
    {
        /* int. */
        if(!$this->_int($bin, $binlen, $acc, $ptr)) return false;
        /* c>rcollapsed */
        $datum = $acc;
        $this->context['collapsed'] = $datum;
        return true;
    }

    private function _field43($bin, $binlen, &$acc, &$ptr)
    {
        /* timestamp. */
        if(!$this->_timestamp($bin, $binlen, $acc, $ptr)) return false;
        /* c>rstart */
        $datum = $acc;
        $this->context['start'] = $datum;
        return true;
    }

    private function _field44($bin, $binlen, &$acc, &$ptr)
    {
        /* timestamp. */
        if(!$this->_timestamp($bin, $binlen, $acc, $ptr)) return false;
        /* c>rend */
        $datum = $acc;
        $this->context['end'] = $datum;
        return true;
    }

    private function _field45($bin, $binlen, &$acc, &$ptr)
    {
        /* hex. */
        if(!$this->_hex($bin, $binlen, $acc, $ptr)) return false;
        /* c>rr45 */
        $datum = $acc;
        $this->context['r45'] = $datum;
        return true;
    }

    private function _field46($bin, $binlen, &$acc, &$ptr)
    {
        /* hex. */
        if(!$this->_hex($bin, $binlen, $acc, $ptr)) return false;
        /* c>rr46 */
        $datum = $acc;
        $this->context['r46'] = $datum;
        return true;
    }

    private function _field47($bin, $binlen, &$acc, &$ptr)
    {
        /* hex. */
        if(!$this->_hex($bin, $binlen, $acc, $ptr)) return false;
        /* c>rr47 */
        $datum = $acc;
        $this->context['r47'] = $datum;
        return true;
    }

    private function _field48($bin, $binlen, &$acc, &$ptr)
    {
        /* hex. */
        if(!$this->_hex($bin, $binlen, $acc, $ptr)) return false;
        /* c>rr48 */
        $datum = $acc;
        $this->context['r48'] = $datum;
        return true;
    }

    private function _field49($bin, $binlen, &$acc, &$ptr)
    {
        /* hex. */
        if(!$this->_hex($bin, $binlen, $acc, $ptr)) return false;
        /* c>rr49 */
        $datum = $acc;
        $this->context['r49'] = $datum;
        return true;
    }

    private function _field50($bin, $binlen, &$acc, &$ptr)
    {
        /* hex. */
        if(!$this->_hex($bin, $binlen, $acc, $ptr)) return false;
        /* c>rr50 */
        $datum = $acc;
        $this->context['r50'] = $datum;
        return true;
    }

    private function _field51($bin, $binlen, &$acc, &$ptr)
    {
        /* hex. */
        if(!$this->_hex($bin, $binlen, $acc, $ptr)) return false;
        /* c>rr51 */
        $datum = $acc;
        $this->context['r51'] = $datum;
        return true;
    }

    private function _field52($bin, $binlen, &$acc, &$ptr)
    {
        /* hex. */
        if(!$this->_hex($bin, $binlen, $acc, $ptr)) return false;
        /* c>rr52 */
        $datum = $acc;
        $this->context['r52'] = $datum;
        return true;
    }

    private function _field53($bin, $binlen, &$acc, &$ptr)
    {
        /* hex. */
        if(!$this->_hex($bin, $binlen, $acc, $ptr)) return false;
        /* c>rr53 */
        $datum = $acc;
        $this->context['r53'] = $datum;
        return true;
    }

    private function _field54($bin, $binlen, &$acc, &$ptr)
    {
        /* timestamp. */
        if(!$this->_timestamp($bin, $binlen, $acc, $ptr)) return false;
        /* c>rr54unknownTimestamp */
        $datum = $acc;
        $this->context['r54unknownTimestamp'] = $datum;
        return true;
    }

    private function _field55($bin, $binlen, &$acc, &$ptr)
    {
        /* hex. */
        if(!$this->_hex($bin, $binlen, $acc, $ptr)) return false;
        /* c>rr55 */
        $datum = $acc;
        $this->context['r55'] = $datum;
        return true;
    }

    private function _field56($bin, $binlen, &$acc, &$ptr)
    {
        /* hex. */
        if(!$this->_hex($bin, $binlen, $acc, $ptr)) return false;
        /* c>rr56 */
        $datum = $acc;
        $this->context['r56'] = $datum;
        return true;
    }

    private function _field57($bin, $binlen, &$acc, &$ptr)
    {
        /* string. */
        if(!$this->_string($bin, $binlen, $acc, $ptr)) return false;
        /* c>rsoftware */
        $datum = $acc;
        $this->context['software'] = $datum;
        return true;
    }

    private function _field58($bin, $binlen, &$acc, &$ptr)
    {
        /* int. */
        if(!$this->_int($bin, $binlen, $acc, $ptr)) return false;
        /* c>rsoftwareBuild */
        $datum = $acc;
        $this->context['softwareBuild'] = $datum;
        return true;
    }

    private function _field59($bin, $binlen, &$acc, &$ptr)
    {
        /* hex. */
        if(!$this->_hex($bin, $binlen, $acc, $ptr)) return false;
        /* c>rr59 */
        $datum = $acc;
        $this->context['r59'] = $datum;
        return true;
    }

    private function _field60($bin, $binlen, &$acc, &$ptr)
    {
        /* hex. */
        if(!$this->_hex($bin, $binlen, $acc, $ptr)) return false;
        /* c>rr60 */
        $datum = $acc;
        $this->context['r60'] = $datum;
        return true;
    }

    private function _field61($bin, $binlen, &$acc, &$ptr)
    {
        /* int. */
        if(!$this->_int($bin, $binlen, $acc, $ptr)) return false;
        /* c>rendRow */
        $datum = $acc;
        $this->context['endRow'] = $datum;
        return true;
    }

    private function _field62($bin, $binlen, &$acc, &$ptr)
    {
        /* hex. */
        if(!$this->_hex($bin, $binlen, $acc, $ptr)) return false;
        /* c>rr62 */
        $datum = $acc;
        $this->context['r62'] = $datum;
        return true;
    }

    private function _field63($bin, $binlen, &$acc, &$ptr)
    {
        /* string. */
        if(!$this->_string($bin, $binlen, $acc, $ptr)) return false;
        /* c>rdevice */
        $datum = $acc;
        $this->context['device'] = $datum;
        return true;
    }

    private function _field64($bin, $binlen, &$acc, &$ptr)
    {
        /* hex. */
        if(!$this->_hex($bin, $binlen, $acc, $ptr)) return false;
        /* c>rr64 */
        $datum = $acc;
        $this->context['r64'] = $datum;
        return true;
    }

    private function _field65($bin, $binlen, &$acc, &$ptr)
    {
        /* hex. */
        if(!$this->_hex($bin, $binlen, $acc, $ptr)) return false;
        /* c>rr65 */
        $datum = $acc;
        $this->context['r65'] = $datum;
        return true;
    }

    private function _field66($bin, $binlen, &$acc, &$ptr)
    {
        /* hex. */
        if(!$this->_hex($bin, $binlen, $acc, $ptr)) return false;
        /* c>rr66 */
        $datum = $acc;
        $this->context['r66'] = $datum;
        return true;
    }

    private function _field67($bin, $binlen, &$acc, &$ptr)
    {
        /* hex. */
        if(!$this->_hex($bin, $binlen, $acc, $ptr)) return false;
        /* c>rr67 */
        $datum = $acc;
        $this->context['r67'] = $datum;
        return true;
    }

    private function _field68($bin, $binlen, &$acc, &$ptr)
    {
        /* hex. */
        if(!$this->_hex($bin, $binlen, $acc, $ptr)) return false;
        /* c>rr68 */
        $datum = $acc;
        $this->context['r68'] = $datum;
        return true;
    }

    private function _field69($bin, $binlen, &$acc, &$ptr)
    {
        /* hex. */
        if(!$this->_hex($bin, $binlen, $acc, $ptr)) return false;
        /* c>rr69 */
        $datum = $acc;
        $this->context['r69'] = $datum;
        return true;
    }

    private function lookup($sub, $bin, $binlen, &$acc, &$ptr)
    {
        switch($sub) {
            case 'main': return $this->_main($bin, $binlen, $acc, $ptr);
            case 'ascii': return $this->_ascii($bin, $binlen, $acc, $ptr);
            case 'string': return $this->_string($bin, $binlen, $acc, $ptr);
            case 'int': return $this->_int($bin, $binlen, $acc, $ptr);
            case 'hex': return $this->_hex($bin, $binlen, $acc, $ptr);
            case 'float': return $this->_float($bin, $binlen, $acc, $ptr);
            case 'timestamp': return $this->_timestamp($bin, $binlen, $acc, $ptr);
            case 'field': return $this->_field($bin, $binlen, $acc, $ptr);
            case 'field1': return $this->_field1($bin, $binlen, $acc, $ptr);
            case 'field41': return $this->_field41($bin, $binlen, $acc, $ptr);
            case 'field42': return $this->_field42($bin, $binlen, $acc, $ptr);
            case 'field43': return $this->_field43($bin, $binlen, $acc, $ptr);
            case 'field44': return $this->_field44($bin, $binlen, $acc, $ptr);
            case 'field45': return $this->_field45($bin, $binlen, $acc, $ptr);
            case 'field46': return $this->_field46($bin, $binlen, $acc, $ptr);
            case 'field47': return $this->_field47($bin, $binlen, $acc, $ptr);
            case 'field48': return $this->_field48($bin, $binlen, $acc, $ptr);
            case 'field49': return $this->_field49($bin, $binlen, $acc, $ptr);
            case 'field50': return $this->_field50($bin, $binlen, $acc, $ptr);
            case 'field51': return $this->_field51($bin, $binlen, $acc, $ptr);
            case 'field52': return $this->_field52($bin, $binlen, $acc, $ptr);
            case 'field53': return $this->_field53($bin, $binlen, $acc, $ptr);
            case 'field54': return $this->_field54($bin, $binlen, $acc, $ptr);
            case 'field55': return $this->_field55($bin, $binlen, $acc, $ptr);
            case 'field56': return $this->_field56($bin, $binlen, $acc, $ptr);
            case 'field57': return $this->_field57($bin, $binlen, $acc, $ptr);
            case 'field58': return $this->_field58($bin, $binlen, $acc, $ptr);
            case 'field59': return $this->_field59($bin, $binlen, $acc, $ptr);
            case 'field60': return $this->_field60($bin, $binlen, $acc, $ptr);
            case 'field61': return $this->_field61($bin, $binlen, $acc, $ptr);
            case 'field62': return $this->_field62($bin, $binlen, $acc, $ptr);
            case 'field63': return $this->_field63($bin, $binlen, $acc, $ptr);
            case 'field64': return $this->_field64($bin, $binlen, $acc, $ptr);
            case 'field65': return $this->_field65($bin, $binlen, $acc, $ptr);
            case 'field66': return $this->_field66($bin, $binlen, $acc, $ptr);
            case 'field67': return $this->_field67($bin, $binlen, $acc, $ptr);
            case 'field68': return $this->_field68($bin, $binlen, $acc, $ptr);
            case 'field69': return $this->_field69($bin, $binlen, $acc, $ptr);
            default:
                throw new RuntimeException('No such subroutine ' . $sub);
        }
    }

}
